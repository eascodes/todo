(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>m});var r=n(537),a=n.n(r),o=n(645),i=n.n(o),l=n(667),c=n.n(l),u=new URL(n(201),n.b),d=i()(a()),s=c()(u);d.push([t.id,"@font-face {\n    font-family: 'MyFont';\n    src: url("+s+');\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    color: white;\n    font-family: \'MyFont\';\n    height: 100%;\n    min-height: 100vh;\n    display: grid;\n    grid-template-columns: 1fr 6fr;\n    grid-template-rows: 1fr 6fr;\n    grid-template-areas: \n        "header header"\n        "nav project-container";\n}\n\n.header {\n    background-color: #e76f51;\n    grid-area: header;\n    text-align: center;\n}\n\n.nav {\n    background-color: #264653;\n    grid-area: nav;\n    min-width: 147px;\n} \n\n.nav > ul {\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: 1.3rem;\n    padding-left: 15px;\n}\n\n.nav li {\n    margin-bottom: 10px;\n}\n\n.nav ul li:hover {\n    cursor: pointer;\n    color: #ffd56b;\n}\n\n/*MAIN PROJECTS DISPLAY*/\n\n.project-container {\n    grid-area: project-container;\n    padding: 20px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n}\n\n.card {\n    background-color: #2a9d8f;\n    width: 250px;\n    height: 250px;\n    box-sizing: border-box;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n}\n\n.card h3 {\n    margin: 0;\n    text-align: center;\n    min-height: 46px;\n}\n\n.card ul {\n    list-style: none;\n    padding-left: 0;\n}\n\n.card li {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.card li > div > p + p:hover {\n    color: #ffd56b;\n    cursor: pointer;\n}\n\n.card > div > ul > li > div {\n    display: flex;\n    flex-direction: row;\n    gap: 5px;\n    align-items: center;\n}\n\n.card p {\n    margin: 0;\n}\n\n.card button {\n    margin-bottom: 10px;\n    margin-top: auto;\n}\n\n.checkbox {\n    font-size: 2rem;\n}\n\n.checkbox:hover {\n    cursor: pointer;\n    color: #ffd56b;\n}\n\n.strikethrough {\n    text-decoration: line-through;\n}\n\n/*FORMS*/\n\nform {\n    background-color: #2a9d8f;\n    padding: 20px 40px 20px 40px;\n    width: 50%;\n    margin-left: auto;\n    margin-right: auto;\n}\n\nform div {\n    display: flex;\n    flex-direction: column;\n}\n\nform ul {\n    list-style: none;\n    margin: 0;\n    padding-left: 0;\n}\n\nform li {\n    margin-bottom: 10px;\n}\n\nlabel[for="newTitle"],\nlabel[for="desc"],\nlabel[for="date"],\nlabel[for="select-option"] {\n    margin-right: 8px;\n}\n\n#low-priority {\n    margin-left: 8px;\n}\n\nlabel[for="project"] {\n    margin-bottom: 5px;\n}\n\nform h3 {\n    margin-top: 0;\n    text-align: center;\n    font-size: 1.6rem;\n}\n\nbutton {\n   border: none;\n   text-decoration: none; \n   background-color: #264653;\n   color: white;\n   padding: 5px 10px;\n   align-self: center;\n   margin-top: 15px;\n}\n\nbutton:hover {\n    cursor: pointer;\n    color: #264653;\n    background-color: white;\n}\n\n/*MODAL*/\n\n.modal {\n    top: 0%;\n    left: 0%;\n    width: 100vw;\n    height: 100vh;\n    position: absolute;\n    background: rgba(0, 0, 0, 0.5);\n  }\n\n.child {\n    top: 50%;\n    left: 50%;\n    width: 350px;\n    height: 350px;\n    padding: 30px 30px;\n    background: #2a9d8f;\n    position: absolute;\n    transform: translate(-50%, -50%);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.modal-header {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 10px;\n    margin-bottom: 15px;\n}\n\n.modal-header h3 {\n    margin-bottom: 0;\n}\n\n.modal-div {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto auto auto auto;\n    justify-items: start;\n    align-items: start;\n    column-gap: 20px;\n    row-gap: 10px;\n}\n\n.child h3 {\n    margin-top: 0;\n    align-self: center;\n}\n\n.child p,\n.child h4 {\n    margin: 0;\n}\n\n.child h4 {\n    justify-self: end;\n    font-weight: bold;\n}\n\n.star-filled {\n    color: yellow;\n}\n\n.button-div {\n    display: flex;\n    align-content: center;\n    justify-content: center;\n    gap: 20px;\n    padding-top: 10px;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,4CAA8C;AAClD;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,qBAAqB;IACrB,YAAY;IACZ,iBAAiB;IACjB,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B;;+BAE2B;AAC/B;;AAEA;IACI,yBAAyB;IACzB,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,yBAAyB;IACzB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,cAAc;AAClB;;AAEA,wBAAwB;;AAExB;IACI,4BAA4B;IAC5B,aAAa;IACb,aAAa;IACb,eAAe;IACf,SAAS;AACb;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,SAAS;IACT,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;IACR,mBAAmB;AACvB;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,6BAA6B;AACjC;;AAEA,QAAQ;;AAER;IACI,yBAAyB;IACzB,4BAA4B;IAC5B,UAAU;IACV,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;;;;IAII,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;GACG,YAAY;GACZ,qBAAqB;GACrB,yBAAyB;GACzB,YAAY;GACZ,iBAAiB;GACjB,kBAAkB;GAClB,gBAAgB;AACnB;;AAEA;IACI,eAAe;IACf,cAAc;IACd,uBAAuB;AAC3B;;AAEA,QAAQ;;AAER;IACI,OAAO;IACP,QAAQ;IACR,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,8BAA8B;EAChC;;AAEF;IACI,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,kBAAkB;IAClB,gCAAgC;IAChC,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,uCAAuC;IACvC,oBAAoB;IACpB,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;;IAEI,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,uBAAuB;IACvB,SAAS;IACT,iBAAiB;AACrB",sourcesContent:['@font-face {\n    font-family: \'MyFont\';\n    src: url(\'./LexendDeca-VariableFont_wght.ttf\');\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    color: white;\n    font-family: \'MyFont\';\n    height: 100%;\n    min-height: 100vh;\n    display: grid;\n    grid-template-columns: 1fr 6fr;\n    grid-template-rows: 1fr 6fr;\n    grid-template-areas: \n        "header header"\n        "nav project-container";\n}\n\n.header {\n    background-color: #e76f51;\n    grid-area: header;\n    text-align: center;\n}\n\n.nav {\n    background-color: #264653;\n    grid-area: nav;\n    min-width: 147px;\n} \n\n.nav > ul {\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: 1.3rem;\n    padding-left: 15px;\n}\n\n.nav li {\n    margin-bottom: 10px;\n}\n\n.nav ul li:hover {\n    cursor: pointer;\n    color: #ffd56b;\n}\n\n/*MAIN PROJECTS DISPLAY*/\n\n.project-container {\n    grid-area: project-container;\n    padding: 20px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n}\n\n.card {\n    background-color: #2a9d8f;\n    width: 250px;\n    height: 250px;\n    box-sizing: border-box;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n}\n\n.card h3 {\n    margin: 0;\n    text-align: center;\n    min-height: 46px;\n}\n\n.card ul {\n    list-style: none;\n    padding-left: 0;\n}\n\n.card li {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.card li > div > p + p:hover {\n    color: #ffd56b;\n    cursor: pointer;\n}\n\n.card > div > ul > li > div {\n    display: flex;\n    flex-direction: row;\n    gap: 5px;\n    align-items: center;\n}\n\n.card p {\n    margin: 0;\n}\n\n.card button {\n    margin-bottom: 10px;\n    margin-top: auto;\n}\n\n.checkbox {\n    font-size: 2rem;\n}\n\n.checkbox:hover {\n    cursor: pointer;\n    color: #ffd56b;\n}\n\n.strikethrough {\n    text-decoration: line-through;\n}\n\n/*FORMS*/\n\nform {\n    background-color: #2a9d8f;\n    padding: 20px 40px 20px 40px;\n    width: 50%;\n    margin-left: auto;\n    margin-right: auto;\n}\n\nform div {\n    display: flex;\n    flex-direction: column;\n}\n\nform ul {\n    list-style: none;\n    margin: 0;\n    padding-left: 0;\n}\n\nform li {\n    margin-bottom: 10px;\n}\n\nlabel[for="newTitle"],\nlabel[for="desc"],\nlabel[for="date"],\nlabel[for="select-option"] {\n    margin-right: 8px;\n}\n\n#low-priority {\n    margin-left: 8px;\n}\n\nlabel[for="project"] {\n    margin-bottom: 5px;\n}\n\nform h3 {\n    margin-top: 0;\n    text-align: center;\n    font-size: 1.6rem;\n}\n\nbutton {\n   border: none;\n   text-decoration: none; \n   background-color: #264653;\n   color: white;\n   padding: 5px 10px;\n   align-self: center;\n   margin-top: 15px;\n}\n\nbutton:hover {\n    cursor: pointer;\n    color: #264653;\n    background-color: white;\n}\n\n/*MODAL*/\n\n.modal {\n    top: 0%;\n    left: 0%;\n    width: 100vw;\n    height: 100vh;\n    position: absolute;\n    background: rgba(0, 0, 0, 0.5);\n  }\n\n.child {\n    top: 50%;\n    left: 50%;\n    width: 350px;\n    height: 350px;\n    padding: 30px 30px;\n    background: #2a9d8f;\n    position: absolute;\n    transform: translate(-50%, -50%);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.modal-header {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 10px;\n    margin-bottom: 15px;\n}\n\n.modal-header h3 {\n    margin-bottom: 0;\n}\n\n.modal-div {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto auto auto auto;\n    justify-items: start;\n    align-items: start;\n    column-gap: 20px;\n    row-gap: 10px;\n}\n\n.child h3 {\n    margin-top: 0;\n    align-self: center;\n}\n\n.child p,\n.child h4 {\n    margin: 0;\n}\n\n.child h4 {\n    justify-self: end;\n    font-weight: bold;\n}\n\n.star-filled {\n    color: yellow;\n}\n\n.button-div {\n    display: flex;\n    align-content: center;\n    justify-content: center;\n    gap: 20px;\n    padding-top: 10px;\n}'],sourceRoot:""}]);const m=d},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var u=0;u<t.length;u++){var d=[].concat(t[u]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),e.push(d))}},e}},667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},i=[],l=0;l<t.length;l++){var c=t[l],u=r.base?c[0]+r.base:c[0],d=o[u]||0,s="".concat(u," ").concat(d);o[u]=d+1;var m=n(s),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)e[m].references++,e[m].updater(A);else{var f=a(A,r);r.byIndex=l,e.splice(l,0,{identifier:s,updater:f,references:1})}i.push(s)}return i}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var l=n(o[i]);e[l].references--}for(var c=r(t,a),u=0;u<o.length;u++){var d=n(o[u]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},201:(t,e,n)=>{t.exports=n.p+"85a26ab7491852266e9b.ttf"}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),a=n.n(r),o=n(569),i=n.n(o),l=n(565),c=n.n(l),u=n(216),d=n.n(u),s=n(589),m=n.n(s),A=n(426),f={};f.styleTagTransform=m(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=d(),e()(A.Z,f),A.Z&&A.Z.locals&&A.Z.locals;const h=()=>{const t=document.querySelector(".project-container");for(;t.lastElementChild;)t.removeChild(t.lastElementChild)},p=t=>{let e={list:[""],title:t.value};localStorage.setItem(t.value,JSON.stringify(e))};function g(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function v(t){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},v(t)}function b(t){return g(1,arguments),t instanceof Date||"object"===v(t)&&"[object Date]"===Object.prototype.toString.call(t)}function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function y(t){g(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===C(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(t){if(g(1,arguments),!b(t)&&"number"!=typeof t)return!1;var e=y(t);return!isNaN(Number(e))}function B(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function x(t,e){g(2,arguments);var n=y(t).getTime(),r=B(e);return new Date(n+r)}function I(t,e){g(2,arguments);var n=B(e);return x(t,-n)}var S=864e5;function T(t){g(1,arguments);var e=1,n=y(t),r=n.getUTCDay(),a=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function E(t){g(1,arguments);var e=y(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=T(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=T(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function k(t){g(1,arguments);var e=E(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=T(n);return r}var M=6048e5,D={};function N(){return D}function P(t,e){var n,r,a,o,i,l,c,u;g(1,arguments);var d=N(),s=B(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==n?n:0);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=y(t),A=m.getUTCDay(),f=(A<s?7:0)+A-s;return m.setUTCDate(m.getUTCDate()-f),m.setUTCHours(0,0,0,0),m}function U(t,e){var n,r,a,o,i,l,c,u;g(1,arguments);var d=y(t),s=d.getUTCFullYear(),m=N(),A=B(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:m.firstWeekContainsDate)&&void 0!==r?r:null===(c=m.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(s+1,0,A),f.setUTCHours(0,0,0,0);var h=P(f,e),p=new Date(0);p.setUTCFullYear(s,0,A),p.setUTCHours(0,0,0,0);var v=P(p,e);return d.getTime()>=h.getTime()?s+1:d.getTime()>=v.getTime()?s:s-1}function L(t,e){var n,r,a,o,i,l,c,u;g(1,arguments);var d=N(),s=B(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:d.firstWeekContainsDate)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1),m=U(t,e),A=new Date(0);A.setUTCFullYear(m,0,s),A.setUTCHours(0,0,0,0);var f=P(A,e);return f}var j=6048e5;function O(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const Y=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return O("yy"===e?r%100:r,e.length)},q=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):O(n+1,2)},H=function(t,e){return O(t.getUTCDate(),e.length)},W=function(t,e){return O(t.getUTCHours()%12||12,e.length)},F=function(t,e){return O(t.getUTCHours(),e.length)},z=function(t,e){return O(t.getUTCMinutes(),e.length)},R=function(t,e){return O(t.getUTCSeconds(),e.length)},J=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return O(Math.floor(r*Math.pow(10,n-3)),e.length)};var Q={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return Y(t,e)},Y:function(t,e,n,r){var a=U(t,r),o=a>0?a:1-a;return"YY"===e?O(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):O(o,e.length)},R:function(t,e){return O(E(t),e.length)},u:function(t,e){return O(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return O(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return O(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return q(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return O(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=function(t,e){g(1,arguments);var n=y(t),r=P(n,e).getTime()-L(n,e).getTime();return Math.round(r/j)+1}(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):O(a,e.length)},I:function(t,e,n){var r=function(t){g(1,arguments);var e=y(t),n=T(e).getTime()-k(e).getTime();return Math.round(n/M)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):O(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):H(t,e)},D:function(t,e,n){var r=function(t){g(1,arguments);var e=y(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),a=n-r;return Math.floor(a/S)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):O(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return O(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return O(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return O(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return W(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):F(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):O(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):O(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):z(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):R(t,e)},S:function(t,e){return J(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return Z(a);case"XXXX":case"XX":return X(a);default:return X(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return Z(a);case"xxxx":case"xx":return X(a);default:return X(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+G(a,":");default:return"GMT"+X(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+G(a,":");default:return"GMT"+X(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return O(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return O((r._originalDate||t).getTime(),e.length)}};function G(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+O(o,2)}function Z(t,e){return t%60==0?(t>0?"-":"+")+O(Math.abs(t)/60,2):X(t,e)}function X(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+O(Math.floor(a/60),2)+n+O(a%60,2)}const $=Q;var _=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},V=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const K={p:V,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return _(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",_(a,e)).replace("{{time}}",V(o,e))}};function tt(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var et=["D","DD"],nt=["YY","YYYY"];function rt(t){return-1!==et.indexOf(t)}function at(t){return-1!==nt.indexOf(t)}function ot(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var it={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function lt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const ct={date:lt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:lt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:lt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var ut={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function dt(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var i=t.defaultWidth,l=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[l]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const st={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:dt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:dt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:dt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:dt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:dt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function mt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,l=o[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(c)?ft(c,(function(t){return t.test(l)})):At(c,(function(t){return t.test(l)}));i=t.valueCallback?t.valueCallback(u):u,i=n.valueCallback?n.valueCallback(i):i;var d=e.slice(l.length);return{value:i,rest:d}}}function At(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function ft(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var ht,pt={ordinalNumber:(ht={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(ht.matchPattern);if(!n)return null;var r=n[0],a=t.match(ht.parsePattern);if(!a)return null;var o=ht.valueCallback?ht.valueCallback(a[0]):a[0];o=e.valueCallback?e.valueCallback(o):o;var i=t.slice(r.length);return{value:o,rest:i}}),era:mt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:mt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:mt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:mt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:mt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const gt={code:"en-US",formatDistance:function(t,e,n){var r,a=it[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:ct,formatRelative:function(t,e,n,r){return ut[t]},localize:st,match:pt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var vt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,bt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ct=/^'([^]*?)'?$/,yt=/''/g,wt=/[a-zA-Z]/;function Bt(t,e,n){var r,a,o,i,l,c,u,d,s,m,A,f,h,p,v,b,C,x;g(2,arguments);var S=String(e),T=N(),E=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:T.locale)&&void 0!==r?r:gt,k=B(null!==(o=null!==(i=null!==(l=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(u=n.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==l?l:T.firstWeekContainsDate)&&void 0!==i?i:null===(s=T.locale)||void 0===s||null===(m=s.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==o?o:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=B(null!==(A=null!==(f=null!==(h=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(v=n.locale)||void 0===v||null===(b=v.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==h?h:T.weekStartsOn)&&void 0!==f?f:null===(C=T.locale)||void 0===C||null===(x=C.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==A?A:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var D=y(t);if(!w(D))throw new RangeError("Invalid time value");var P=tt(D),U=I(D,P),L={firstWeekContainsDate:k,weekStartsOn:M,locale:E,_originalDate:D},j=S.match(bt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,K[e])(t,E.formatLong):t})).join("").match(vt).map((function(r){if("''"===r)return"'";var a=r[0];if("'"===a)return xt(r);var o=$[a];if(o)return null!=n&&n.useAdditionalWeekYearTokens||!at(r)||ot(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!rt(r)||ot(r,e,String(t)),o(U,r,E.localize,L);if(a.match(wt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("");return j}function xt(t){var e=t.match(Ct);return e?e[1].replace(yt,"'"):t}const It=()=>{if(h(),0===localStorage.length){let t={list:[{title:"Plan route",description:"Use guidebook to plan hiking route",dueDate:Bt(new Date("04/05/2023"),"MM-dd-yy"),priority:1,status:0},{title:"Plan meals",description:"Plan meals to meet calorie needs",dueDate:Bt(new Date("05/01/2023"),"MM-dd-yy"),priority:0,status:0},{title:"Pack gear",description:"Pack gear needed for 10 day trip",dueDate:Bt(new Date("05/15/2023"),"MM-dd-yy"),status:0}],title:"Prep for Backpacking Trip"},e={list:[{title:"Cuddle",description:"Cuddle with my dog",dueDate:Bt(new Date("12/25/2022"),"MM-dd-yy"),priority:1,status:0}],title:"Love my dog"};localStorage.setItem("backpackTrip",JSON.stringify(t)),localStorage.setItem("loveDog",JSON.stringify(e))}!function(){for(let e=0;e<localStorage.length;e++){t=St(JSON.parse(localStorage.getItem(localStorage.key(e)))),document.querySelector(".project-container").appendChild(t)}var t}()};function St(t){const e=document.createElement("div");e.classList.add("card");const n=document.createElement("h3");n.textContent=t.title,e.appendChild(n);const r=document.createElement("div");e.appendChild(r);const a=document.createElement("ul");r.appendChild(a);for(let e=0;e<t.list.length;e++){const n=document.createElement("li");a.appendChild(n);const r=document.createElement("div");n.appendChild(r);const o=document.createElement("p");o.classList.add("checkbox");const i=document.createElement("p"),l=document.createElement("p");Tt(o,t.list[e],i,l);let c="";1!==t.list[e].priority&&"high"!==t.list[e].priority||(c="&#11088;"),null!=t.list[e].title&&(i.innerHTML=t.list[e].title+" "+c,l.innerHTML=t.list[e].dueDate,r.appendChild(o),r.appendChild(i),n.appendChild(l)),kt(t.list[e],o,i,l,t),i.addEventListener("click",(()=>{Dt(t.list[e],t)}))}const o=document.createElement("button");return o.innerHTML="Delete Project",e.appendChild(o),o.addEventListener("click",(()=>{var e;e=t,localStorage.removeItem(e.title),It()})),e}const Tt=(t,e,n,r)=>{1===e.status?Et(t,n,r):0===e.status&&(t.innerHTML="&#9744;")},Et=(t,e,n)=>{t.innerHTML="&#9745;",e.classList.add("strikethrough"),n.classList.add("strikethrough")},kt=(t,e,n,r,a)=>{e.addEventListener("click",(()=>{0===t.status?(Et(e,n,r),Mt(a,t)):1===t.status&&(((t,e,n)=>{t.innerHTML="&#9744;",e.classList.remove("strikethrough"),n.classList.remove("strikethrough")})(e,n,r),Mt(a,t))}))},Mt=(t,e)=>{for(let n=0;n<localStorage.length;n++)if(t.title===JSON.parse(localStorage.getItem(localStorage.key(n))).title){let t=JSON.parse(localStorage.getItem(localStorage.key(n)));for(let r=0;r<t.list.length;r++)t.list[r].title==e.title&&(0===t.list[r].status?t.list[r].status=1:1===t.list[r].status&&(t.list[r].status=0),localStorage.setItem(localStorage.key(n),JSON.stringify(t)))}It(),Pt(e,t)},Dt=(t,e)=>{const n=document.createElement("div");n.classList.add("modal");const r=document.createElement("div");r.classList.add("child");const a=document.createElement("div"),o=document.createElement("h3"),i=document.createElement("p"),l=document.createElement("div"),c=document.createElement("h4"),u=document.createElement("p"),d=document.createElement("h4"),s=document.createElement("p");a.classList.add("modal-header"),l.classList.add("modal-div"),i.classList.add("checkbox"),i.innerHTML="&#9634;",o.innerHTML=t.title,c.innerHTML="Description:",u.innerHTML=t.description,d.innerHTML="Due Date:",s.innerHTML=t.dueDate,a.appendChild(i),a.appendChild(o),kt(t,i,o,s,e),Tt(i,t,o,s);const m=document.createElement("h4");m.innerHTML="Priority:";const A=document.createElement("p");let f="",h="";1===t.priority||"high"===t.priority?(h="&#11088;",f="High priority"):(h="&#9734;",f="Low priority"),A.innerHTML=f+" "+h;const p=document.createElement("h4");p.innerHTML="Project:";const g=document.createElement("p");g.innerHTML=e.title;const v=document.createElement("button");v.textContent="Edit Task";const b=document.createElement("button");b.textContent="Delete Task";const C=document.createElement("div");C.classList.add("button-div"),r.appendChild(a),r.appendChild(l),l.appendChild(c),l.appendChild(u),l.appendChild(d),l.appendChild(s),l.appendChild(m),l.appendChild(A),l.appendChild(p),l.appendChild(g),r.appendChild(C),C.appendChild(v),C.appendChild(b),n.appendChild(r),document.body.appendChild(n),v.addEventListener("click",Vt),b.addEventListener("click",(()=>{_t(e,t)})),n.addEventListener("click",(t=>{"modal"===t.target.className&&Nt()}))},Nt=()=>{const t=document.querySelector(".modal");t&&t.remove()},Pt=(t,e)=>{const n=document.querySelector(".modal");if(Nt(),n)for(let n=0;n<localStorage.length;n++)if(e.title===JSON.parse(localStorage.getItem(localStorage.key(n))).title){let e=JSON.parse(localStorage.getItem(localStorage.key(n)));for(let n=0;n<e.list.length;n++)e.list[n].title==t.title&&Dt(e.list[n],e)}};Math.pow(10,8);var Ut=36e5,Lt={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},jt=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Ot=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Yt=/^([+-])(\d{2})(?::?(\d{2}))?$/;function qt(t){var e,n={},r=t.split(Lt.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?e=r[0]:(n.date=r[0],e=r[1],Lt.timeZoneDelimiter.test(n.date)&&(n.date=t.split(Lt.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var a=Lt.timezone.exec(e);a?(n.time=e.replace(a[1],""),n.timezone=a[1]):n.time=e}return n}function Ht(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:t.slice((r[1]||r[2]).length)}}function Wt(t,e){if(null===e)return new Date(NaN);var n=t.match(jt);if(!n)return new Date(NaN);var r=!!n[4],a=Ft(n[1]),o=Ft(n[2])-1,i=Ft(n[3]),l=Ft(n[4]),c=Ft(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,l,c)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var a=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,l,c):new Date(NaN);var u=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(Qt[e]||(Gt(t)?29:28))}(e,o,i)&&function(t,e){return e>=1&&e<=(Gt(t)?366:365)}(e,a)?(u.setUTCFullYear(e,o,Math.max(a,i)),u):new Date(NaN)}function Ft(t){return t?parseInt(t):1}function zt(t){var e=t.match(Ot);if(!e)return NaN;var n=Rt(e[1]),r=Rt(e[2]),a=Rt(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,a)?n*Ut+6e4*r+1e3*a:NaN}function Rt(t){return t&&parseFloat(t.replace(",","."))||0}function Jt(t){if("Z"===t)return 0;var e=t.match(Yt);if(!e)return 0;var n="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?n*(r*Ut+6e4*a):NaN}var Qt=[31,null,31,30,31,30,31,31,30,31,30,31];function Gt(t){return t%400==0||t%4==0&&t%100!=0}const Zt=t=>{t.preventDefault();const e=document.querySelector("#newTitle").value,n=document.querySelector("#desc").value;let r=document.querySelector("#date").value;r=Bt(function(t,e){var n;g(1,arguments);var r=B(null!==(n=null==e?void 0:e.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var a,o=qt(t);if(o.date){var i=Ht(o.date,r);a=Wt(i.restDateString,i.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var l,c=a.getTime(),u=0;if(o.time&&(u=zt(o.time),isNaN(u)))return new Date(NaN);if(!o.timezone){var d=new Date(c+u),s=new Date(0);return s.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),s.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),s}return l=Jt(o.timezone),isNaN(l)?new Date(NaN):new Date(c+u+l)}(r),"MM-dd-yy");let a="",o=document.getElementsByName("priority");for(let t=0;t<o.length;t++)o[t].checked&&(a=o[t].value);let i=document.querySelector("#select-option").value;for(let t=0;t<localStorage.length;t++)i==JSON.parse(localStorage.getItem(localStorage.key(t))).title&&(i=JSON.parse(localStorage.getItem(localStorage.key(t))));let l=Xt(e,n,r,a,i);$t(i,l)},Xt=(t,e,n,r)=>({title:t,description:e,dueDate:n,priority:r,status:0}),$t=(t,e)=>{for(let n=0;n<localStorage.length;n++)if(t.title===JSON.parse(localStorage.getItem(localStorage.key(n))).title){let t=JSON.parse(localStorage.getItem(localStorage.key(n)));t.list.push(e),localStorage.setItem(localStorage.key(n),JSON.stringify(t))}It()},_t=(t,e)=>{for(let n=0;n<localStorage.length;n++)if(t.title===JSON.parse(localStorage.getItem(localStorage.key(n))).title){let t=JSON.parse(localStorage.getItem(localStorage.key(n)));for(let r=0;r<t.list.length;r++)t.list[r].title==e.title&&(t.list.splice(r,1),localStorage.setItem(localStorage.key(n),JSON.stringify(t)))}It(),Nt()},Vt=()=>{document.querySelector(".modal-div");const t=Array.from(document.querySelectorAll(".modal-div p")),e=t[0],n=e.textContent;e.innerHTML="";const r=document.createElement("input");r.setAttribute("value",n),e.appendChild(r);const a=t[1],o=a.textContent;a.innerHTML="";const i=document.createElement("input");i.setAttribute("type","date"),i.setAttribute("value",o),a.appendChild(i);const l=t[2],c=l.textContent;l.innerHTML="";const u=document.createElement("select");u.setAttribute("name","priority"),u.setAttribute("id","select-option");const d=document.createElement("option");d.innerHTML="High priority &#11088;",d.setAttribute("value","high"),l.appendChild(u),u.appendChild(d);const s=document.createElement("option");s.innerHTML="Low priority &#9734;",s.setAttribute("value","low"),l.appendChild(u),u.appendChild(s),c===d.innerHTML?d.setAttribute("selected","selected"):c===s.innerHTML&&s.setAttribute("selected","selected");const m=t[3],A=m.textContent;m.innerHTML="";const f=document.createElement("select");f.setAttribute("name","priority"),f.setAttribute("id","select-option"),m.appendChild(f);for(let t=0;t<localStorage.length;t++){const e=document.createElement("option"),n=JSON.parse(localStorage.getItem(localStorage.key(t))).title;e.setAttribute("value",n),e.textContent=n,f.appendChild(e),A===e.textContent&&e.setAttribute("selected","selected")}},Kt=(t,e,n,r,a,o)=>{e=document.createElement("li");const i=document.createElement("label");i.setAttribute("for",n),i.textContent=r,(a=document.createElement("input")).setAttribute("type",o),a.setAttribute("id",n),a.setAttribute("name",n),t.appendChild(e),e.appendChild(i),e.appendChild(a)},te=(t,e,n,r,a,o,i,l,c,u)=>{const d=document.createElement("li");t.appendChild(d);const s=(t,e,n,r,a)=>{const o=document.createElement("label");o.setAttribute("for",e),o.textContent=n,(r=document.createElement("input")).setAttribute("type","radio"),r.setAttribute("id",e),r.setAttribute("name",t),r.setAttribute("value",a),d.appendChild(r),d.appendChild(o)};s(e,n,r,a,o),s(e,i,l,c,u)};It(),document.querySelector(".nav>ul>li").addEventListener("click",It),document.querySelector(".nav>ul>li+li").addEventListener("click",(()=>{h(),(()=>{const t=document.querySelector(".project-container"),e=document.createElement("form"),n=document.createElement("h3");n.textContent="Add 'To Do' Item",t.appendChild(e),e.appendChild(n),e.setAttribute("id","newToDoForm"),e.setAttribute("action",""),e.setAttribute("method","post");const r=document.createElement("div");e.appendChild(r);const a=document.createElement("ul");r.appendChild(a),Kt(a,"firstItem","newTitle","To Do Item Title","input1","text"),Kt(a,"secItem","desc","Description","input2","text"),Kt(a,"thirdItem","date","Due Date","input3","date"),te(a,"priority","high-priority","High Priority","input4","high","low-priority","Low Priority","input5","low");const o=document.createElement("li"),i=document.createElement("label");i.textContent="Project",i.setAttribute("for","select-option");const l=document.createElement("select");l.setAttribute("name","Project"),l.setAttribute("id","select-option"),a.appendChild(o),o.appendChild(i),o.appendChild(l);for(let t=0;t<localStorage.length;t++){const e=document.createElement("option"),n=JSON.parse(localStorage.getItem(localStorage.key(t))).title;e.setAttribute("value",n),e.textContent=n,l.appendChild(e)}const c=document.createElement("button");c.setAttribute("type","submit"),c.textContent="Submit",c.setAttribute("id","submit-todo"),r.appendChild(c),e.addEventListener("submit",Zt)})()})),document.querySelector(".nav>ul>li+li+li").addEventListener("click",(()=>{h(),(()=>{const t=document.querySelector(".project-container"),e=document.createElement("form"),n=document.createElement("h3");n.textContent="Add a Project",t.appendChild(e),e.appendChild(n),e.setAttribute("id","newProjectForm"),e.setAttribute("action",""),e.setAttribute("method","post");const r=document.createElement("div");e.appendChild(r);const a=document.createElement("label");a.setAttribute("for","project"),a.textContent="New Project";const o=document.createElement("input");o.setAttribute("type","text"),o.setAttribute("id","project-title"),o.setAttribute("name","project"),r.appendChild(a),r.appendChild(o);const i=document.createElement("button");i.setAttribute("type","submit"),i.textContent="Submit",i.setAttribute("id","submit-project"),r.appendChild(i),e.addEventListener("submit",(()=>{p(o)}))})()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,